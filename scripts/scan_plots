#!/bin/bash

set -euo pipefail
IFS=$'\n\t'
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PYTHON=${DIR}/python2.7
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"

# Increase these numbers to make this take longer to run
SAMPLES_PER_STEP=${SAMPLES_PER_STEP-5}
STEPS=${STEPS-20}

OUTPUT_PDF=${OUTPUT_PDF-"/tmp/summary-$(uuidgen | tr [:lower:] [:upper:]).pdf"}
OUTPUT_PDF_SET=0
DEBUG=1

if [[ "$*" =~ "--help" ]] ; then
       cat <<EOF
usage: $0 <output> [--help] [--samples-per-step] [--steps]

Take a scan of every parameter and output graphs of the results to a PDF

If no argument is given, a random file is used for output

optional arguments:
  --help                      show this help message and exit
  --quiet                     turn off verbose output
  --samples-per-step          how many samples to take for each step of the scan
  --steps                     how many steps to take in the scan
EOF
       exit 0
fi

for key in "$@" ; do
   case $key in
       --samples-per-step)
       SAMPLES_PER_STEP=$2
       shift
       ;;
       --quiet)
       DEBUG=0
       shift
       ;;
       --steps)
       STEPS=$2
       shift
       ;;
       *)
       if [[ "${key}" == *.pdf ]] ; then
          if [[ OUTPUT_PDF_SET == 1 ]] ; then
             echo "${RED}Cannot set output to ${key} because it is already set to ${OUTPUT_PDF}${RESET}" > /dev/stderr
             exit 1
          fi
          OUTPUT_PDF=${key}
          OUTPUT_PDF_SET=1
       fi
       if [[ "${key}" == -* ]] ; then
          echo "${RED}Unknown command line argument ${key}${RESET}" > /dev/stderr
          exit 1
       fi
       shift
       ;;
   esac
done

if [[ ${DEBUG} == 1 ]] ; then 
   echo STEPS=$STEPS
   echo SAMPLES_PER_STEP=$SAMPLES_PER_STEP
   echo OUTPUT_PDF=${OUTPUT_PDF}
fi

if [ -f "${OUTPUT_PDF}" ] ; then
   echo "${RED}Please make a backup of \"${OUTPUT_PDF}\" BEFORE running this program and trying to output to it!${RESET}" > /dev/stderr
   exit 1
fi

SCAN_PLOT_DIR=$(mktemp -d /tmp/scan_plots.XXXXXXXXXX)

function _scan_plot {
  ${PYTHON} ${DIR}/scan_plot --steps ${STEPS} --samples-per-step ${SAMPLES_PER_STEP} --output ${SCAN_PLOT_DIR} $*
}

function scan_plot {
  if [[ ${DEBUG} == 1 ]] ; then
     _scan_plot $*
  else
     _scan_plot $* > /dev/null
  fi
}

mkdir -p ${SCAN_PLOT_DIR}

# In each case, the first argument is the operating parameter, the second is the low value, the third is the high value
# Low and high values default to listings in the data sheet if not specified
# Output is summarized in ${OUTPUT_PDF}

scan_plot ccd1_backside
scan_plot ccd1_input_diode_high
scan_plot ccd1_input_diode_low
scan_plot ccd1_input_gate_1
scan_plot ccd1_input_gate_2
scan_plot ccd1_output_drain_a
scan_plot ccd1_output_drain_b
scan_plot ccd1_output_drain_c
scan_plot ccd1_output_drain_d
scan_plot ccd1_output_gate
scan_plot ccd1_parallel_high
scan_plot ccd1_parallel_low
scan_plot ccd1_reset_drain
scan_plot ccd1_reset_high
scan_plot ccd1_reset_low
scan_plot ccd1_scupper
scan_plot ccd1_serial_high
scan_plot ccd1_serial_low
scan_plot ccd1_substrate
scan_plot ccd2_backside
scan_plot ccd2_input_diode_high
scan_plot ccd2_input_diode_low
scan_plot ccd2_input_gate_1
scan_plot ccd2_input_gate_2
scan_plot ccd2_output_drain_a
scan_plot ccd2_output_drain_b
scan_plot ccd2_output_drain_c
scan_plot ccd2_output_drain_d
scan_plot ccd2_output_gate
scan_plot ccd2_parallel_high
scan_plot ccd2_parallel_low
scan_plot ccd2_reset_drain
scan_plot ccd2_reset_high
scan_plot ccd2_reset_low
scan_plot ccd2_scupper
scan_plot ccd2_serial_high
scan_plot ccd2_serial_low
scan_plot ccd2_substrate
scan_plot ccd3_backside
scan_plot ccd3_input_diode_high
scan_plot ccd3_input_diode_low
scan_plot ccd3_input_gate_1
scan_plot ccd3_input_gate_2
scan_plot ccd3_output_drain_a
scan_plot ccd3_output_drain_b
scan_plot ccd3_output_drain_c
scan_plot ccd3_output_drain_d
scan_plot ccd3_output_gate
scan_plot ccd3_parallel_high
scan_plot ccd3_parallel_low
scan_plot ccd3_reset_drain
scan_plot ccd3_reset_high
scan_plot ccd3_reset_low
scan_plot ccd3_scupper
scan_plot ccd3_serial_high
scan_plot ccd3_serial_low
scan_plot ccd3_substrate
scan_plot ccd4_backside
scan_plot ccd4_input_diode_high
scan_plot ccd4_input_diode_low
scan_plot ccd4_input_gate_1
scan_plot ccd4_input_gate_2
scan_plot ccd4_output_drain_a
scan_plot ccd4_output_drain_b
scan_plot ccd4_output_drain_c
scan_plot ccd4_output_drain_d
scan_plot ccd4_output_gate
scan_plot ccd4_parallel_high
scan_plot ccd4_parallel_low
scan_plot ccd4_reset_drain
scan_plot ccd4_reset_high
scan_plot ccd4_reset_low
scan_plot ccd4_scupper
scan_plot ccd4_serial_high
scan_plot ccd4_serial_low
scan_plot ccd4_substrate
scan_plot heater_1_current
scan_plot heater_2_current
scan_plot heater_3_current

gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=${OUTPUT_PDF} ${SCAN_PLOT_DIR}/*.pdf 
echo Wrote ${OUTPUT_PDF} ${GREEN}ok${RESET}
