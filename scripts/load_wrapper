#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""This script loads the FPE with the wrapper version specified in the input argument, e.g. 
"./load_wrapper.py 6.1.1" at the command line.  

It also performs basic housekeeping voltage measurements to verify functionality. 

Before running this script, the Observatory Simulator should be power-cycled. When you are running this script and the ObsSim has not been power cycled, you should set preload=False.
"""

FPE_Wrapper_versions = ['6.1.1', '6.0.5772', '6.1t.1', '6.1.4', '6.1t.4', '6.1.5', '6.1t.5', '6.2.3']

if __name__ == "__main__":
    from tessfpe.dhu.fpe import FPE
    from termcolor import colored
    import argparse
    import sys

    default_binary_version = "6.2.3"

    parser = argparse.ArgumentParser(description='Load the FPE wrapper')
    parser.add_argument('fpe_wrapper_binary', nargs='?', type=str, default=None,
                        help="Name of a specified binary file to upload; if none specified defaults to uploading "
                             "the version: '{version}'. If a known version is specified instead of a file, "
                             "that version will be used".format(version=default_binary_version))
    parser.add_argument('--wrapper-version', type=str, default=default_binary_version,
                        help="The version of the wrapper to load.  Must be one of either {0}, or {1}".format(
                            ", ".join(FPE_Wrapper_versions[:-1]), FPE_Wrapper_versions[-1]))
    parser.add_argument('--FPE-number', metavar='N', type=int, nargs='?', default=1, help='which FPE to use')
    parser.add_argument('--debug', action='store_true', help='Enable debugging output')
    parser.add_argument('--force', action='store_true', help='Force (re)load the wrapper')
    parser.add_argument('--dhu-reset', action='store_true', help='Reset the DHU before loading')
    args = parser.parse_args()
    try:
        if args.fpe_wrapper_binary is not None:
            assert args.wrapper_version in FPE_Wrapper_versions, \
                "FPE Wrapper version must be one of {0} (was set to '{1}')".format(
                    FPE_Wrapper_versions, args.wrapper_version)
        with FPE(args.FPE_number, debug=args.debug, sanity_checks=False) as fpe:
            print u"{1} {0}".format(colored("ok", 'green'),
                                    fpe.load_wrapper(
                                        fpe_wrapper_binary=args.fpe_wrapper_binary,
                                        wrapper_version = args.wrapper_version,
                                        force=args.force, 
                                        dhu_reset=args.dhu_reset))
            sys.exit(0)
    except Exception as e:
        if args.debug:
            raise
        print >> sys.stderr, colored(u"{1}: {2} {0}".format("X", type(e).__name__, e), 'red', attrs=['bold'])
        sys.exit(1)
