#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""This script performs measurements of reference voltages to verify functionality."""


def parse_expected_values_json(expected_values_json, operating_parameters):
    """Parse expected values from a json"""
    import json
    from tessfpe.data.housekeeping_channels import housekeeping_channels
    with open(expected_values_json) as f:
        expected_values_data = json.load(f)
    output = {k: {} for k in expected_values_data}
    for key in expected_values_data:
        assert key in housekeeping_channels, "Unknown housekeeping channel \"{key}\"".format(key=key)
        assert "value" in expected_values_data[key], "No \"value\" field for channel \"{key}\"".format(key=key)
        value = expected_values_data[key]["value"]
        assert (value == "auto") or isinstance(value, float), \
            "Expected value must be the string \"auto\" " \
            "or a floating point.  Value for key \"{key}\" was set to \"{value}\"".format(
                key=key,
                value=value
            )
        if value == "auto":
            assert key in operating_parameters, \
                "Cannot automatically infer expected value for \"{key}\"".format(key=key)
            output[key]["value"] = operating_parameters[key]
        else:
            output[key]["value"] = value
        assert isinstance(output[key]["value"], float), \
            "Expected value for key \"{key}\" must be a floating point number, was \"{value}\"".format(
                key=key,
                value=output[key]["value"])

        assert "tolerance" in expected_values_data[key], \
            "No \"tolerance\" field for channel \"{key}\"".format(key=key)
        tolerance = expected_values_data[key]["tolerance"]
        assert re.match("[0-9]+%", tolerance) \
            if isinstance(tolerance, basestring) else isinstance(tolerance, float), \
            "Tolerance must be a string \"X%\" " \
            "(where X is an integer between 0 and 100) " \
            "or a floating point.  Tolerance for key \"{key}\" was set to \"{tolerance}\"".format(
                key=key,
                tolerance=tolerance
            )
        if isinstance(tolerance, basestring):
            percentage = int(tolerance[:-1])
            assert 0 <= percentage <= 100, "Cannot have tolerance be {percentage}%".format(percentage=percentage)
            total_range = abs(housekeeping_channels[key]["high"] - housekeeping_channels[key]["low"])
            output[key]["tolerance"] = float(percentage) / 100.0 * total_range
        else:
            output[key]["tolerance"] = tolerance
    return output


def report_table(data, expected_vals={}, precision=4, keys=None):
    """Make a table (string) reporting the values of housekeeping data"""
    from tessfpe.data.housekeeping_channels import housekeeping_channels
    import numpy as np
    import pandas as pd
    from pprint import pprint
    pprint(expected_values)
    if not isinstance(expected_vals, dict):
        expected_vals = {}
    if keys is None:
        keys = data.keys()
        keys.sort()
    units = {j: housekeeping_channels[j]["unit"] for j in keys}
    # If we only have one sample for every channel, we don't need to report statistics
    if all(isinstance(v, (list, set, tuple)) for v in data.values()) and \
            all(len(v) == 1 for v in data.values()):
        for j in keys:
            data[j] = data[j][0]
    if all(isinstance(v, (list, set, tuple)) for v in data.values()):
        samples_text = u"Samples: {0}\n".format(len(data.values()[0])) \
            if len(set([len(v) for v in data.values()])) == 1 else u""
        report = pd.DataFrame(
            np.transpose(
                [[(u"{0:." + unicode(precision) + "f} {1}").format(expected_vals[j]["value"], units[j])
                  if j in expected_vals else "N/A"
                  for j in keys],
                 [(u"+/- {0:." + unicode(precision) + "f} {1}").format(expected_vals[j]["tolerance"], units[j])
                  if j in expected_vals else ""
                  for j in keys],
                 [(u"{0:." + unicode(precision) + "f} {1}").format(np.average(data[j]), units[j])
                  for j in keys],
                 [(u"{0:." + unicode(precision) + "f} {1}").format(np.std(data[j]), units[j])
                  for j in keys],
                 [u"{0} {1}Â²".format(np.var(data[j]), units[j])
                  for j in keys]]),
            index=keys,
            columns=[u' Expected', u' Tolerance', u' Average', u' STD', u' Variance'])
        # Variance is silly, don't worry about it
        del report[u' Variance']

        if list(report[u' Expected'].unique()) == [u'N/A']:
            del report[u' Expected']
    else:
        samples_text = u""
        report = pd.DataFrame(
            np.transpose(
                [[(u"{0:." + unicode(precision) + "f} {1}").format(expected_vals[j]["value"], units[j])
                  if j in expected_vals else "N/A"
                  for j in keys],
                 [(u"+/- {0:." + unicode(precision) + "f} {1}").format(expected_vals[j]["tolerance"], units[j])
                  if j in expected_vals else ""
                  for j in keys],
                 [(u"{0:." + unicode(precision) + "f} {1}").format(data[j], units[j])
                  for j in keys],
                 [("ok" if expected_vals[j]["value"] - expected_vals[j]["tolerance"] <=
                           data[j] <=
                           expected_vals[j]["value"] + expected_vals[j]["tolerance"] else "FAIL")
                  if j in expected_vals else ""
                  for j in keys]]),
            index=keys,
            columns=[u' Expected', u' Tolerance', u' Actual', u' Status'])
        if list(report[u' Expected'].unique()) == [u'N/A']:
            del report[u' Expected']
            del report[u' Tolerance']
            del report[u' Status']
            report.columns = ['']

    return samples_text + report.to_string(justify='left',
                                           formatters={col: u'{{:<{}s}}'.format(report[col].str.len().max()).format
                                                       for col in report.columns.values})


def unique(ls):
    """Takes an iterable and returns a unique list of elements"""
    visited = set()
    output = []
    for l in ls:
        if l in visited:
            continue
        else:
            output.append(l)
            visited.add(l)
    return output


def match_channels(patterns, chans, sort=False):
    """Given a list of patterns and channels, return those channels that match those patterns"""
    import fnmatch
    import re
    out = unique(c for p in map(lambda x: re.compile(fnmatch.translate(x)), patterns)
                 for c in chans
                 if p.match(c))  # TODO: handle wildcards
    return sorted(out) if sort else out


if __name__ == "__main__":
    from tessfpe.dhu.fpe import FPE
    from tessfpe.data.housekeeping_channels import housekeeping_channels
    from copy import deepcopy
    import argparse
    import sys
    import re

    # Parse the command line arguments
    parser = argparse.ArgumentParser(description='Get the analogue housekeeping data for specified parameters')
    parser.add_argument('expected_values_json', nargs='?', default=None)
    parser.add_argument('--FPE-number', metavar='N', type=int, nargs='?', default=1, help='which FPE to use')
    parser.add_argument('--samples', metavar='N', type=int, nargs='?', default=1, help='number of samples to take')
    parser.add_argument('--precision', metavar='N', type=int, nargs='?', default=4,
                        help='number of digits of precision to use when outputting')
    parser.add_argument('--channels', nargs='+',
                        help='channels to report ; can accept UNIX-style wild cards (defaults to *)')
    parser.add_argument('--debug', action='store_true', help='Enable debugging output')
    parser.add_argument('--sort', action='store_true', help='Sort the housekeeping channels')
    args = parser.parse_args()

    with FPE(args.FPE_number, debug=args.debug) as fpe:
        if args.expected_values_json is None:
            expected_values = {}
        else:
            expected_values = parse_expected_values_json(args.expected_values_json, fpe.ops.values)

        if args.channels:
            channels = match_channels(args.channels, housekeeping_channels.keys(), sort=args.sort)
        else:
            channels = housekeeping_channels.keys()
            channels.sort()

        reported_values = {k: [] for k in channels}
        for _ in range(args.samples):
            hk = deepcopy(fpe.house_keeping)
            for k in channels:
                reported_values[k].append(hk["analogue"][k])

        print report_table(reported_values,
                           expected_values,
                           keys=channels,
                           precision=args.precision)
        sys.exit(0)  # 0 is SUCCESS for shell commands
